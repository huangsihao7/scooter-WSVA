// Code generated by goctl. DO NOT EDIT.
// Source: comment.proto

package commentsrv

import (
	"context"

	"github.com/huangsihao7/scooter-WSVA/comment/rpc/comment"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Comment               = comment.Comment
	CommentActionRequest  = comment.CommentActionRequest
	CommentActionResponse = comment.CommentActionResponse
	CommentListRequest    = comment.CommentListRequest
	CommentListResponse   = comment.CommentListResponse
	DanMu                 = comment.DanMu
	DanmuActionRequest    = comment.DanmuActionRequest
	DanmuActionResponse   = comment.DanmuActionResponse
	DanmuListRequest      = comment.DanmuListRequest
	DanmuListResponse     = comment.DanmuListResponse
	User                  = comment.User

	CommentSrv interface {
		CommentAction(ctx context.Context, in *CommentActionRequest, opts ...grpc.CallOption) (*CommentActionResponse, error)
		CommentList(ctx context.Context, in *CommentListRequest, opts ...grpc.CallOption) (*CommentListResponse, error)
		DanMuAction(ctx context.Context, in *DanmuActionRequest, opts ...grpc.CallOption) (*DanmuActionResponse, error)
		DanMuList(ctx context.Context, in *DanmuListRequest, opts ...grpc.CallOption) (*DanmuListResponse, error)
	}

	defaultCommentSrv struct {
		cli zrpc.Client
	}
)

func NewCommentSrv(cli zrpc.Client) CommentSrv {
	return &defaultCommentSrv{
		cli: cli,
	}
}

func (m *defaultCommentSrv) CommentAction(ctx context.Context, in *CommentActionRequest, opts ...grpc.CallOption) (*CommentActionResponse, error) {
	client := comment.NewCommentSrvClient(m.cli.Conn())
	return client.CommentAction(ctx, in, opts...)
}

func (m *defaultCommentSrv) CommentList(ctx context.Context, in *CommentListRequest, opts ...grpc.CallOption) (*CommentListResponse, error) {
	client := comment.NewCommentSrvClient(m.cli.Conn())
	return client.CommentList(ctx, in, opts...)
}

func (m *defaultCommentSrv) DanMuAction(ctx context.Context, in *DanmuActionRequest, opts ...grpc.CallOption) (*DanmuActionResponse, error) {
	client := comment.NewCommentSrvClient(m.cli.Conn())
	return client.DanMuAction(ctx, in, opts...)
}

func (m *defaultCommentSrv) DanMuList(ctx context.Context, in *DanmuListRequest, opts ...grpc.CallOption) (*DanmuListResponse, error) {
	client := comment.NewCommentSrvClient(m.cli.Conn())
	return client.DanMuList(ctx, in, opts...)
}
