// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: label.proto

package label

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Label_InsertLabel_FullMethodName = "/label.Label/InsertLabel"
)

// LabelClient is the client API for Label service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LabelClient interface {
	InsertLabel(ctx context.Context, in *InsertLabelReq, opts ...grpc.CallOption) (*InsertLabelResp, error)
}

type labelClient struct {
	cc grpc.ClientConnInterface
}

func NewLabelClient(cc grpc.ClientConnInterface) LabelClient {
	return &labelClient{cc}
}

func (c *labelClient) InsertLabel(ctx context.Context, in *InsertLabelReq, opts ...grpc.CallOption) (*InsertLabelResp, error) {
	out := new(InsertLabelResp)
	err := c.cc.Invoke(ctx, Label_InsertLabel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LabelServer is the server API for Label service.
// All implementations must embed UnimplementedLabelServer
// for forward compatibility
type LabelServer interface {
	InsertLabel(context.Context, *InsertLabelReq) (*InsertLabelResp, error)
	mustEmbedUnimplementedLabelServer()
}

// UnimplementedLabelServer must be embedded to have forward compatible implementations.
type UnimplementedLabelServer struct {
}

func (UnimplementedLabelServer) InsertLabel(context.Context, *InsertLabelReq) (*InsertLabelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertLabel not implemented")
}
func (UnimplementedLabelServer) mustEmbedUnimplementedLabelServer() {}

// UnsafeLabelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LabelServer will
// result in compilation errors.
type UnsafeLabelServer interface {
	mustEmbedUnimplementedLabelServer()
}

func RegisterLabelServer(s grpc.ServiceRegistrar, srv LabelServer) {
	s.RegisterService(&Label_ServiceDesc, srv)
}

func _Label_InsertLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertLabelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelServer).InsertLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Label_InsertLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelServer).InsertLabel(ctx, req.(*InsertLabelReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Label_ServiceDesc is the grpc.ServiceDesc for Label service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Label_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "label.Label",
	HandlerType: (*LabelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertLabel",
			Handler:    _Label_InsertLabel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "label.proto",
}
