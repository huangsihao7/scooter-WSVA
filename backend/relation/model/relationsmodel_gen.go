// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	relationsFieldNames          = builder.RawFieldNames(&Relations{})
	relationsRows                = strings.Join(relationsFieldNames, ",")
	relationsRowsExpectAutoSet   = strings.Join(stringx.Remove(relationsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	relationsRowsWithPlaceHolder = strings.Join(stringx.Remove(relationsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	relationsModel interface {
		Insert(ctx context.Context, data *Relations) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Relations, error)
		Update(ctx context.Context, data *Relations) error
		Delete(ctx context.Context, id int64) error
		FindIsFavorite(ctx context.Context, uid int64, toUid int64) bool
		DeleteUnFavorite(ctx context.Context, uid int64, toUid int64) error
		FindFavorite(ctx context.Context, uid int64) ([]*Relations, error)
		FindFollower(ctx context.Context, uid int64) ([]*Relations, error)
		FindFriend(ctx context.Context, uid int64) ([]*Relations, error)
	}

	defaultRelationsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Relations struct {
		Id          int64        `db:"id"`           // 主键
		FollowerId  int64        `db:"follower_id"`  // 关注者id
		FollowingId int64        `db:"following_id"` // 被关注者id
		CreatedAt   time.Time    `db:"created_at"`
		UpdatedAt   sql.NullTime `db:"updated_at"`
		DeletedAt   sql.NullTime `db:"deleted_at"`
	}
)

func newRelationsModel(conn sqlx.SqlConn) *defaultRelationsModel {
	return &defaultRelationsModel{
		conn:  conn,
		table: "`relations`",
	}
}

func (m *defaultRelationsModel) withSession(session sqlx.Session) *defaultRelationsModel {
	return &defaultRelationsModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`relations`",
	}
}

func (m *defaultRelationsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultRelationsModel) FindOne(ctx context.Context, id int64) (*Relations, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", relationsRows, m.table)
	var resp Relations
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRelationsModel) Insert(ctx context.Context, data *Relations) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, relationsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.FollowerId, data.FollowingId, data.DeletedAt)
	return ret, err
}

func (m *defaultRelationsModel) Update(ctx context.Context, data *Relations) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, relationsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.FollowerId, data.FollowingId, data.DeletedAt, data.Id)
	return err
}

func (m *defaultRelationsModel) tableName() string {
	return m.table
}
func (m *defaultRelationsModel) FindIsFavorite(ctx context.Context, uid int64, toUid int64) bool {
	query := fmt.Sprintf("select %s from %s where `follower_id` = ? and `following_id` = ? limit 1", relationsRows, m.table)
	var resp Relations
	err := m.conn.QueryRowCtx(ctx, &resp, query, uid, toUid)
	switch err {
	case nil:
		return true
	case sqlc.ErrNotFound:
		return false
	default:
		return false
	}
}

func (m *defaultRelationsModel) DeleteUnFavorite(ctx context.Context, uid int64, toUid int64) error {
	query := fmt.Sprintf("delete from %s where `follower_id` = ? and `following_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, uid, toUid)
	return err
}
func (m *defaultRelationsModel) FindFavorite(ctx context.Context, uid int64) ([]*Relations, error) {
	query := fmt.Sprintf("select %s from %s where `follower_id` = ?", relationsRows, m.table)
	var resp []*Relations
	err := m.conn.QueryRowsCtx(ctx, &resp, query, uid)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRelationsModel) FindFollower(ctx context.Context, uid int64) ([]*Relations, error) {
	query := fmt.Sprintf("select %s from %s where `following_id` = ?", relationsRows, m.table)
	var resp []*Relations
	err := m.conn.QueryRowsCtx(ctx, &resp, query, uid)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRelationsModel) FindFriend(ctx context.Context, uid int64) ([]*Relations, error) {
	query := fmt.Sprintf("SELECT %s FROM %s WHERE `following_id` IN (SELECT `follower_id` FROM %s WHERE `following_id` = ?) AND `follower_id` = ?", relationsRows, m.table, m.table)
	var resp []*Relations
	err := m.conn.QueryRowsCtx(ctx, &resp, query, uid, uid)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
