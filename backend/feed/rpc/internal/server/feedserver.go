// Code generated by goctl. DO NOT EDIT.
// Source: feed.proto

package server

import (
	"context"

	"github.com/huangsihao7/scooter-WSVA/feed/rpc/feed"
	"github.com/huangsihao7/scooter-WSVA/feed/rpc/internal/logic"
	"github.com/huangsihao7/scooter-WSVA/feed/rpc/internal/svc"
)

type FeedServer struct {
	svcCtx *svc.ServiceContext
	feed.UnimplementedFeedServer
}

func NewFeedServer(svcCtx *svc.ServiceContext) *FeedServer {
	return &FeedServer{
		svcCtx: svcCtx,
	}
}

func (s *FeedServer) CreateVideo(ctx context.Context, in *feed.CreateVideoRequest) (*feed.CreateVideoResponse, error) {
	l := logic.NewCreateVideoLogic(ctx, s.svcCtx)
	return l.CreateVideo(in)
}

func (s *FeedServer) ListVideo(ctx context.Context, in *feed.ListVideoRequest) (*feed.ListVideoResponse, error) {
	l := logic.NewListVideoLogic(ctx, s.svcCtx)
	return l.ListVideo(in)
}

// rpc CountVideo(CountVideoRequest) returns (CountVideoResponse) {}
func (s *FeedServer) ListVideosByRecommend(ctx context.Context, in *feed.ListFeedRequest) (*feed.ListFeedResponse, error) {
	l := logic.NewListVideosByRecommendLogic(ctx, s.svcCtx)
	return l.ListVideosByRecommend(in)
}

func (s *FeedServer) ListVideos(ctx context.Context, in *feed.ListFeedRequest) (*feed.ListFeedResponse, error) {
	l := logic.NewListVideosLogic(ctx, s.svcCtx)
	return l.ListVideos(in)
}

func (s *FeedServer) ListCategoryVideos(ctx context.Context, in *feed.CategoryFeedRequest) (*feed.CategoryFeedResponse, error) {
	l := logic.NewListCategoryVideosLogic(ctx, s.svcCtx)
	return l.ListCategoryVideos(in)
}

func (s *FeedServer) ListPopularVideos(ctx context.Context, in *feed.ListFeedRequest) (*feed.ListFeedResponse, error) {
	l := logic.NewListPopularVideosLogic(ctx, s.svcCtx)
	return l.ListPopularVideos(in)
}
