// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: feed.proto

package feed

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FeedSrv_PublishList_FullMethodName = "/feed.FeedSrv/PublishList"
)

// FeedSrvClient is the client API for FeedSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeedSrvClient interface {
	PublishList(ctx context.Context, in *PublishListRequest, opts ...grpc.CallOption) (*PublishListResponse, error)
}

type feedSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedSrvClient(cc grpc.ClientConnInterface) FeedSrvClient {
	return &feedSrvClient{cc}
}

func (c *feedSrvClient) PublishList(ctx context.Context, in *PublishListRequest, opts ...grpc.CallOption) (*PublishListResponse, error) {
	out := new(PublishListResponse)
	err := c.cc.Invoke(ctx, FeedSrv_PublishList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedSrvServer is the server API for FeedSrv service.
// All implementations must embed UnimplementedFeedSrvServer
// for forward compatibility
type FeedSrvServer interface {
	PublishList(context.Context, *PublishListRequest) (*PublishListResponse, error)
	mustEmbedUnimplementedFeedSrvServer()
}

// UnimplementedFeedSrvServer must be embedded to have forward compatible implementations.
type UnimplementedFeedSrvServer struct {
}

func (UnimplementedFeedSrvServer) PublishList(context.Context, *PublishListRequest) (*PublishListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishList not implemented")
}
func (UnimplementedFeedSrvServer) mustEmbedUnimplementedFeedSrvServer() {}

// UnsafeFeedSrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeedSrvServer will
// result in compilation errors.
type UnsafeFeedSrvServer interface {
	mustEmbedUnimplementedFeedSrvServer()
}

func RegisterFeedSrvServer(s grpc.ServiceRegistrar, srv FeedSrvServer) {
	s.RegisterService(&FeedSrv_ServiceDesc, srv)
}

func _FeedSrv_PublishList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedSrvServer).PublishList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedSrv_PublishList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedSrvServer).PublishList(ctx, req.(*PublishListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeedSrv_ServiceDesc is the grpc.ServiceDesc for FeedSrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeedSrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "feed.FeedSrv",
	HandlerType: (*FeedSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishList",
			Handler:    _FeedSrv_PublishList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feed.proto",
}
