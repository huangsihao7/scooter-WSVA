// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: feed.proto

package feed

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Feed_CreateVideo_FullMethodName           = "/feed.Feed/CreateVideo"
	Feed_ListVideo_FullMethodName             = "/feed.Feed/ListVideo"
	Feed_ListVideosByRecommend_FullMethodName = "/feed.Feed/ListVideosByRecommend"
	Feed_ListVideos_FullMethodName            = "/feed.Feed/ListVideos"
	Feed_ListCategoryVideos_FullMethodName    = "/feed.Feed/ListCategoryVideos"
	Feed_ListPopularVideos_FullMethodName     = "/feed.Feed/ListPopularVideos"
	Feed_CreateVideoTest_FullMethodName       = "/feed.Feed/CreateVideoTest"
	Feed_VideoDuration_FullMethodName         = "/feed.Feed/VideoDuration"
	Feed_ListHistoryVideos_FullMethodName     = "/feed.Feed/ListHistoryVideos"
	Feed_ListNeighborVideos_FullMethodName    = "/feed.Feed/ListNeighborVideos"
	Feed_DeleteVideo_FullMethodName           = "/feed.Feed/DeleteVideo"
)

// FeedClient is the client API for Feed service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeedClient interface {
	CreateVideo(ctx context.Context, in *CreateVideoRequest, opts ...grpc.CallOption) (*CreateVideoResponse, error)
	ListVideo(ctx context.Context, in *ListVideoRequest, opts ...grpc.CallOption) (*ListVideoResponse, error)
	// rpc CountVideo(CountVideoRequest) returns (CountVideoResponse) {}
	ListVideosByRecommend(ctx context.Context, in *ListFeedRequest, opts ...grpc.CallOption) (*ListFeedResponse, error)
	ListVideos(ctx context.Context, in *ListFeedRequest, opts ...grpc.CallOption) (*ListFeedResponse, error)
	ListCategoryVideos(ctx context.Context, in *CategoryFeedRequest, opts ...grpc.CallOption) (*CategoryFeedResponse, error)
	ListPopularVideos(ctx context.Context, in *ListFeedRequest, opts ...grpc.CallOption) (*ListFeedResponse, error)
	CreateVideoTest(ctx context.Context, in *CreateVideoRequest, opts ...grpc.CallOption) (*CreateVideoResponse, error)
	VideoDuration(ctx context.Context, in *VideoDurationReq, opts ...grpc.CallOption) (*VideoDurationResp, error)
	ListHistoryVideos(ctx context.Context, in *HistoryReq, opts ...grpc.CallOption) (*HistoryResp, error)
	ListNeighborVideos(ctx context.Context, in *NeighborsReq, opts ...grpc.CallOption) (*NeighborsResp, error)
	DeleteVideo(ctx context.Context, in *DeleteVideoReq, opts ...grpc.CallOption) (*DeleteVideoResp, error)
}

type feedClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedClient(cc grpc.ClientConnInterface) FeedClient {
	return &feedClient{cc}
}

func (c *feedClient) CreateVideo(ctx context.Context, in *CreateVideoRequest, opts ...grpc.CallOption) (*CreateVideoResponse, error) {
	out := new(CreateVideoResponse)
	err := c.cc.Invoke(ctx, Feed_CreateVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) ListVideo(ctx context.Context, in *ListVideoRequest, opts ...grpc.CallOption) (*ListVideoResponse, error) {
	out := new(ListVideoResponse)
	err := c.cc.Invoke(ctx, Feed_ListVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) ListVideosByRecommend(ctx context.Context, in *ListFeedRequest, opts ...grpc.CallOption) (*ListFeedResponse, error) {
	out := new(ListFeedResponse)
	err := c.cc.Invoke(ctx, Feed_ListVideosByRecommend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) ListVideos(ctx context.Context, in *ListFeedRequest, opts ...grpc.CallOption) (*ListFeedResponse, error) {
	out := new(ListFeedResponse)
	err := c.cc.Invoke(ctx, Feed_ListVideos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) ListCategoryVideos(ctx context.Context, in *CategoryFeedRequest, opts ...grpc.CallOption) (*CategoryFeedResponse, error) {
	out := new(CategoryFeedResponse)
	err := c.cc.Invoke(ctx, Feed_ListCategoryVideos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) ListPopularVideos(ctx context.Context, in *ListFeedRequest, opts ...grpc.CallOption) (*ListFeedResponse, error) {
	out := new(ListFeedResponse)
	err := c.cc.Invoke(ctx, Feed_ListPopularVideos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) CreateVideoTest(ctx context.Context, in *CreateVideoRequest, opts ...grpc.CallOption) (*CreateVideoResponse, error) {
	out := new(CreateVideoResponse)
	err := c.cc.Invoke(ctx, Feed_CreateVideoTest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) VideoDuration(ctx context.Context, in *VideoDurationReq, opts ...grpc.CallOption) (*VideoDurationResp, error) {
	out := new(VideoDurationResp)
	err := c.cc.Invoke(ctx, Feed_VideoDuration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) ListHistoryVideos(ctx context.Context, in *HistoryReq, opts ...grpc.CallOption) (*HistoryResp, error) {
	out := new(HistoryResp)
	err := c.cc.Invoke(ctx, Feed_ListHistoryVideos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) ListNeighborVideos(ctx context.Context, in *NeighborsReq, opts ...grpc.CallOption) (*NeighborsResp, error) {
	out := new(NeighborsResp)
	err := c.cc.Invoke(ctx, Feed_ListNeighborVideos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) DeleteVideo(ctx context.Context, in *DeleteVideoReq, opts ...grpc.CallOption) (*DeleteVideoResp, error) {
	out := new(DeleteVideoResp)
	err := c.cc.Invoke(ctx, Feed_DeleteVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedServer is the server API for Feed service.
// All implementations must embed UnimplementedFeedServer
// for forward compatibility
type FeedServer interface {
	CreateVideo(context.Context, *CreateVideoRequest) (*CreateVideoResponse, error)
	ListVideo(context.Context, *ListVideoRequest) (*ListVideoResponse, error)
	// rpc CountVideo(CountVideoRequest) returns (CountVideoResponse) {}
	ListVideosByRecommend(context.Context, *ListFeedRequest) (*ListFeedResponse, error)
	ListVideos(context.Context, *ListFeedRequest) (*ListFeedResponse, error)
	ListCategoryVideos(context.Context, *CategoryFeedRequest) (*CategoryFeedResponse, error)
	ListPopularVideos(context.Context, *ListFeedRequest) (*ListFeedResponse, error)
	CreateVideoTest(context.Context, *CreateVideoRequest) (*CreateVideoResponse, error)
	VideoDuration(context.Context, *VideoDurationReq) (*VideoDurationResp, error)
	ListHistoryVideos(context.Context, *HistoryReq) (*HistoryResp, error)
	ListNeighborVideos(context.Context, *NeighborsReq) (*NeighborsResp, error)
	DeleteVideo(context.Context, *DeleteVideoReq) (*DeleteVideoResp, error)
	mustEmbedUnimplementedFeedServer()
}

// UnimplementedFeedServer must be embedded to have forward compatible implementations.
type UnimplementedFeedServer struct {
}

func (UnimplementedFeedServer) CreateVideo(context.Context, *CreateVideoRequest) (*CreateVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVideo not implemented")
}
func (UnimplementedFeedServer) ListVideo(context.Context, *ListVideoRequest) (*ListVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVideo not implemented")
}
func (UnimplementedFeedServer) ListVideosByRecommend(context.Context, *ListFeedRequest) (*ListFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVideosByRecommend not implemented")
}
func (UnimplementedFeedServer) ListVideos(context.Context, *ListFeedRequest) (*ListFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVideos not implemented")
}
func (UnimplementedFeedServer) ListCategoryVideos(context.Context, *CategoryFeedRequest) (*CategoryFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCategoryVideos not implemented")
}
func (UnimplementedFeedServer) ListPopularVideos(context.Context, *ListFeedRequest) (*ListFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPopularVideos not implemented")
}
func (UnimplementedFeedServer) CreateVideoTest(context.Context, *CreateVideoRequest) (*CreateVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVideoTest not implemented")
}
func (UnimplementedFeedServer) VideoDuration(context.Context, *VideoDurationReq) (*VideoDurationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoDuration not implemented")
}
func (UnimplementedFeedServer) ListHistoryVideos(context.Context, *HistoryReq) (*HistoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHistoryVideos not implemented")
}
func (UnimplementedFeedServer) ListNeighborVideos(context.Context, *NeighborsReq) (*NeighborsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNeighborVideos not implemented")
}
func (UnimplementedFeedServer) DeleteVideo(context.Context, *DeleteVideoReq) (*DeleteVideoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVideo not implemented")
}
func (UnimplementedFeedServer) mustEmbedUnimplementedFeedServer() {}

// UnsafeFeedServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeedServer will
// result in compilation errors.
type UnsafeFeedServer interface {
	mustEmbedUnimplementedFeedServer()
}

func RegisterFeedServer(s grpc.ServiceRegistrar, srv FeedServer) {
	s.RegisterService(&Feed_ServiceDesc, srv)
}

func _Feed_CreateVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).CreateVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_CreateVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).CreateVideo(ctx, req.(*CreateVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_ListVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).ListVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_ListVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).ListVideo(ctx, req.(*ListVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_ListVideosByRecommend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).ListVideosByRecommend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_ListVideosByRecommend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).ListVideosByRecommend(ctx, req.(*ListFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_ListVideos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).ListVideos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_ListVideos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).ListVideos(ctx, req.(*ListFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_ListCategoryVideos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).ListCategoryVideos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_ListCategoryVideos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).ListCategoryVideos(ctx, req.(*CategoryFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_ListPopularVideos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).ListPopularVideos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_ListPopularVideos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).ListPopularVideos(ctx, req.(*ListFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_CreateVideoTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).CreateVideoTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_CreateVideoTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).CreateVideoTest(ctx, req.(*CreateVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_VideoDuration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoDurationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).VideoDuration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_VideoDuration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).VideoDuration(ctx, req.(*VideoDurationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_ListHistoryVideos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).ListHistoryVideos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_ListHistoryVideos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).ListHistoryVideos(ctx, req.(*HistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_ListNeighborVideos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NeighborsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).ListNeighborVideos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_ListNeighborVideos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).ListNeighborVideos(ctx, req.(*NeighborsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_DeleteVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVideoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).DeleteVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_DeleteVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).DeleteVideo(ctx, req.(*DeleteVideoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Feed_ServiceDesc is the grpc.ServiceDesc for Feed service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Feed_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "feed.Feed",
	HandlerType: (*FeedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVideo",
			Handler:    _Feed_CreateVideo_Handler,
		},
		{
			MethodName: "ListVideo",
			Handler:    _Feed_ListVideo_Handler,
		},
		{
			MethodName: "ListVideosByRecommend",
			Handler:    _Feed_ListVideosByRecommend_Handler,
		},
		{
			MethodName: "ListVideos",
			Handler:    _Feed_ListVideos_Handler,
		},
		{
			MethodName: "ListCategoryVideos",
			Handler:    _Feed_ListCategoryVideos_Handler,
		},
		{
			MethodName: "ListPopularVideos",
			Handler:    _Feed_ListPopularVideos_Handler,
		},
		{
			MethodName: "CreateVideoTest",
			Handler:    _Feed_CreateVideoTest_Handler,
		},
		{
			MethodName: "VideoDuration",
			Handler:    _Feed_VideoDuration_Handler,
		},
		{
			MethodName: "ListHistoryVideos",
			Handler:    _Feed_ListHistoryVideos_Handler,
		},
		{
			MethodName: "ListNeighborVideos",
			Handler:    _Feed_ListNeighborVideos_Handler,
		},
		{
			MethodName: "DeleteVideo",
			Handler:    _Feed_DeleteVideo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feed.proto",
}
