// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	videosFieldNames          = builder.RawFieldNames(&Videos{})
	videosRows                = strings.Join(videosFieldNames, ",")
	videosRowsExpectAutoSet   = strings.Join(stringx.Remove(videosFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	videosRowsWithPlaceHolder = strings.Join(stringx.Remove(videosFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheVideosIdPrefix = "cache:videos:id:"
)

type (
	videosModel interface {
		Insert(ctx context.Context, data *Videos) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Videos, error)
		Update(ctx context.Context, data *Videos) error
		Delete(ctx context.Context, id int64) error
	}

	defaultVideosModel struct {
		sqlc.CachedConn
		table string
	}

	Videos struct {
		Id            int64        `db:"id"`             // 主键
		AuthorId      int64        `db:"author_id"`      // 上传用户Id
		Title         string       `db:"title"`          // 视频标题
		CoverUrl      string       `db:"cover_url"`      // 封面url
		PlayUrl       string       `db:"play_url"`       // 视频播放url
		FavoriteCount int64        `db:"favorite_count"` // 点赞数
		CommentCount  int64        `db:"comment_count"`  // 评论数目
		CreatedAt     time.Time    `db:"created_at"`
		UpdatedAt     sql.NullTime `db:"updated_at"`
		DeletedAt     sql.NullTime `db:"deleted_at"`
	}
)

func newVideosModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultVideosModel {
	return &defaultVideosModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`videos`",
	}
}

func (m *defaultVideosModel) Delete(ctx context.Context, id int64) error {
	videosIdKey := fmt.Sprintf("%s%v", cacheVideosIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, videosIdKey)
	return err
}

func (m *defaultVideosModel) FindOne(ctx context.Context, id int64) (*Videos, error) {
	videosIdKey := fmt.Sprintf("%s%v", cacheVideosIdPrefix, id)
	var resp Videos
	err := m.QueryRowCtx(ctx, &resp, videosIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", videosRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultVideosModel) Insert(ctx context.Context, data *Videos) (sql.Result, error) {
	videosIdKey := fmt.Sprintf("%s%v", cacheVideosIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, videosRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.AuthorId, data.Title, data.CoverUrl, data.PlayUrl, data.FavoriteCount, data.CommentCount, data.DeletedAt)
	}, videosIdKey)
	return ret, err
}

func (m *defaultVideosModel) Update(ctx context.Context, data *Videos) error {
	videosIdKey := fmt.Sprintf("%s%v", cacheVideosIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, videosRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.AuthorId, data.Title, data.CoverUrl, data.PlayUrl, data.FavoriteCount, data.CommentCount, data.DeletedAt, data.Id)
	}, videosIdKey)
	return err
}

func (m *defaultVideosModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheVideosIdPrefix, primary)
}

func (m *defaultVideosModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", videosRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultVideosModel) tableName() string {
	return m.table
}
