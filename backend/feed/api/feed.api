syntax = "v1"

type (
	CreateVideoReq {
		Url      string `json:"url"` //视频地址
		CoverUrl string `json:"coverUrl"`
		Title    string `json:"title"`
		Category string `json:"category"`
	}

	CreateVideoResp {
		StatusCode int    `json:"status_code"`
		StatusMsg  string `json:"status_msg"`
	}

	UserVideoListReq {
		ToUid int `json:"toUid"`
	}

	UserVideoListResp {
		StatusCode int         `json:"status_code"`
		StatusMsg  string      `json:"status_msg"`
		Videos     []VideoInfo `json:"videos"`
	}

	VideoInfo {
		Id            int64    `json:"id"`
		Author        UserInfo `json:"author"`
		PlayUrl       string   `json:"playUrl"`
		CoverUrl      string   `json:"coverUrl"`
		FavoriteCount int64    `json:"favoriteCount"`
		CommentCount  int64    `json:"commentCount"`
		IsFavorite    bool     `json:"isFavorite"`
		Title         string   `json:"title"`
	}
	UserInfo {
		Id             int64  `json:"id"`
		Name           string `json:"name"`
		Gender         int64  `json:"gender"`
		Mobile         string `json:"mobile"`
		Avatar         string `json:"avatar"`
		Dec            string `json:"dec"`
		FollowCount    int64  `json:"followCount"`
		FollowerCount  int64  `json:"followerCount"`
		IsFollow       bool   `json:"isFollow"`
		TotalFavorited int64  `json:"totalFavorited"`
		WorkCount      int64  `json:"workCount"`
		FavoriteCount  int64  `json:"favoriteCount"`
	}
)
@server(
	jwt: Auth
)
service feed-api {
	@handler CreateVideo
	post /feed/create (CreateVideoReq) returns(CreateVideoResp)

	@handler UserVideosList
	post /feed/UserVideosList (UserVideoListReq) returns(UserVideoListResp)
}